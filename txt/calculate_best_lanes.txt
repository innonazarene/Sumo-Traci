def calculate_best_lanes(self, vehicle_id):
    # Get the current lane of the vehicle
    current_lane = traci.vehicle.getLaneID(vehicle_id)

    # Get the neighboring lanes of the current lane
    neighboring_lanes = traci.lane.getLinks(current_lane)
    # print("neighboring_lanes: ",neighboring_lanes)
    # Calculate average vehicle speed for each neighboring lane
    lane_speeds = []
    for lane in neighboring_lanes:
        vehicles = traci.lane.getLastStepVehicleIDs(lane[0])
        # print("getLastStepVehicleIDs: ",vehicles)

        speeds = [traci.vehicle.getSpeed(vehicle) for vehicle in vehicles]
        if speeds:
            avg_speed = sum(speeds) / len(speeds)

        else:
            avg_speed = 0
        lane_speeds.append((lane[0], avg_speed))
    # Sort lanes based on average speed in descending order
    sorted_lanes = sorted(lane_speeds, key=lambda x: x[1], reverse=True)

    # Select the best lanes based on your criteria
    best_lanes = [lane[0] for lane in sorted_lanes[:5]]  # Example: Select top 5 lanes with highest average speed
    print("best Lanes",best_lanes)

    return best_lanes